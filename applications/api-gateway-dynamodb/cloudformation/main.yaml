AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: MIT
Description: "Sky-As-Code organisation, AWS-As-Code repository.
  Create REST API by integrating AWS API Gateway directly with DynamoDB.
  The solution abides by following Common context: Single account compliance, Resource tagging compliance.
  **WARNING** You will be billed for the AWS resources used if you create a stack from this template,
  and if you have gone out of your 12-month free-tier."
Parameters:
  # For Resource tagging compliance
  Application:
    Description: Name of the application using this AWS resource.
    Type: String
  CostCenter:
    Description: The department code.
    Type: String
  Environment:
    Description: The deployment environment.
    Type: String

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join
        - '-'
        - - !Ref CostCenter
          - !Ref Application
          - !Ref Environment
          - books
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref CostCenter
              - !Ref Application
              - !Ref Environment
              - books
        - Key: Application
          Value: !Ref Application
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Environment
          Value: !Ref Environment

  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: !Join
            - '-'
            - - !Ref CostCenter
              - !Ref Application
              - !Ref Environment
              - !Ref AWS::Region
              - apigateway-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                # Including * in the resource Arn allows access to the DynamoDB table and indexes
                Resource: !Sub
                  - '${varTableArn}*'
                  - varTableArn: !GetAtt DynamoDBTable.Arn
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref CostCenter
              - !Ref Application
              - !Ref Environment
              - !Ref AWS::Region
              - apigateway-role
        - Key: Application
          Value: !Ref Application
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Environment
          Value: !Ref Environment

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join
        - '-'
        - - !Ref CostCenter
          - !Ref Application
          - !Ref Environment
          - restapi
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref CostCenter
              - !Ref Application
              - !Ref Environment
              - restapi
        - Key: Application
          Value: !Ref Application
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Environment
          Value: !Ref Environment

  BookResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'books'

  BookIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref BookResource
      PathPart: '{bookId}'

  BookMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref BookResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        # Should always be POST when integrating with AWS services
        IntegrationHttpMethod: POST
        # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # Build the structure of the request that is sent when calling DynamoDB PutItem
          # Using single-line, stringified JSON as the mapping template
          # Example body when making API request: {"artist": "The Beatles", "album": "Abbey Road"}
          # Use the unique id of the API context variable (eg: $context.requestId) as the DynamoDB item id
          application/json: !Sub
            - |
              {
                "TableName": "${DBName}",
                "Key": {
                  "Id": {
                    "S": "$context.requestId"
                  }
                },
                "UpdateExpression": "SET Title=:title,Isbn=:isbn,Author=:author,CreatedAt=:createdAt,UpdatedAt=:updatedAt",
                "ExpressionAttributeValues": {
                  ":title": {
                    "S": "$input.path('$.title')"
                  },
                  ":isbn": {
                    "S": "$input.path('$.isbn')"
                  },
                  ":author": {
                    "S": "$input.path('$.author')"
                  },
                  ":createdAt": {
                    "N": "$context.requestTimeEpoch"
                  },
                  ":updatedAt": {
                    "N": "$context.requestTimeEpoch"
                  }
                },
                "ReturnValues": "ALL_NEW"
              }
            - DBName: !Join
              - '-'
              - - !Ref CostCenter
                - !Ref Application
                - !Ref Environment
                - books
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                #set($elem = $input.path('$.Attributes'))
                {
                  "id": "$elem.Id.S",
                  "title": "$elem.Title.S",
                  "isbn": "$elem.Isbn.S",
                  "author": "$elem.Author.S",
                  "createdAt": "$elem.CreatedAt.N",
                  "updatedAt": "$elem.UpdatedAt.N"
                }
      MethodResponses:
        - StatusCode: '200'

  BookMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref BookResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        # Should always be POST when integrating with AWS services
        IntegrationHttpMethod: POST
        # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # Build the structure of the request that is sent when calling DynamoDB PutItem
          # Using single-line, stringified JSON as the mapping template
          # Example body when making API request: {"artist": "The Beatles", "album": "Abbey Road"}
          # Use the unique id of the API context variable (eg: $context.requestId) as the DynamoDB item id
          application/json: !Sub
            - |
              {
                "TableName": "${DBName}"
              }
            - DBName: !Join
              - '-'
              - - !Ref CostCenter
                - !Ref Application
                - !Ref Environment
                - books
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                [
                  #foreach($elem in $inputRoot.Items) {
                    "id": "$elem.Id.S",
                    "title": "$elem.Title.S",
                    "isbn": "$elem.Isbn.S",
                    "author": "$elem.Author.S",
                    "createdAt": "$elem.CreatedAt.N",
                    "updatedAt": "$elem.UpdatedAt.N"
                  }#if($foreach.hasNext),#end
                  #end
                ]
      MethodResponses:
        - StatusCode: '200'

  BookIdMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref BookIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        # Should always be POST when integrating with AWS services
        IntegrationHttpMethod: POST
        # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # Build the structure of the request that is sent when calling DynamoDB PutItem
          # Using single-line, stringified JSON as the mapping template
          # Example body when making API request: {"artist": "The Beatles", "album": "Abbey Road"}
          # Use the unique id of the API context variable (eg: $context.requestId) as the DynamoDB item id
          application/json: !Sub
            - |
              {
                "TableName": "${DBName}",
                "Key": {
                  "Id": {
                    "S": "$input.params('bookId')"
                  }
                }
              }
            - DBName: !Join
              - '-'
              - - !Ref CostCenter
                - !Ref Application
                - !Ref Environment
                - books
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                #set($elem = $input.path('$.Item'))
                #if($elem.Id.S != "")
                {
                  "id": "$elem.Id.S",
                  "title": "$elem.Title.S",
                  "isbn": "$elem.Isbn.S",
                  "author": "$elem.Author.S",
                  "createdAt": "$elem.CreatedAt.N",
                  "updatedAt": "$elem.UpdatedAt.N"
                }
                #else
                    #set($context.responseOverride.status = 404)
                {
                  "message": "Item not found"
                }
                #end
      MethodResponses:
        - StatusCode: '200'

  BookIdMethodDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref BookIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        # Should always be POST when integrating with AWS services
        IntegrationHttpMethod: POST
        # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # Build the structure of the request that is sent when calling DynamoDB PutItem
          # Using single-line, stringified JSON as the mapping template
          # Example body when making API request: {"artist": "The Beatles", "album": "Abbey Road"}
          # Use the unique id of the API context variable (eg: $context.requestId) as the DynamoDB item id
          application/json: !Sub
            - |
              {
                "TableName": "${DBName}",
                "Key": {
                  "Id": {
                    "S": "$input.params('bookId')"
                  }
                },
                "ReturnValues": "ALL_OLD"
              }
            - DBName: !Join
              - '-'
              - - !Ref CostCenter
                - !Ref Application
                - !Ref Environment
                - books
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                #set($elem = $input.path('$.Attributes'))
                #if($elem.Id.S != "")
                {
                  "deletedAt": "$context.requestTimeEpoch"
                }
                #else
                    #set($context.responseOverride.status = 404)
                {
                  "message": "Item not found"
                }
                #end
      MethodResponses:
        - StatusCode: '200'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - BookMethodPost
      - BookMethodGet
      - BookIdMethodGet
      - BookIdMethodDelete
    Properties:
      RestApiId: !Ref Api
      StageName: !Ref Environment

Outputs:
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Env}'
      - ApiId: !Ref Api
        Env: !Ref Environment
